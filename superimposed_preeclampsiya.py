# app.py
# Streamlit app: ¬´OMM SUPERIMPOSED PREECLAMPSIA PREDICT¬ª
# D = 2.45*X1 - 4.63*X2 + 2.64*X3 + 4.22*X4 - 57.11*X5 + 117.62*X6 - 3.96
# Threshold: D > 0 ‚Üí –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫, –∏–Ω–∞—á–µ –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫

import streamlit as st
import pandas as pd
import numpy as np

st.set_page_config(
    page_title="OMM SUPERIMPOSED PREECLAMPSIA PREDICT",
    page_icon="ü©∫",
    layout="centered",
)

# ----------------------- Helpers -----------------------

COEFFS = {
    "X1": 2.45,     # –≥–∏–ø–æ–¥–∏–Ω–∞–º–∏—è (1/0)
    "X2": -4.63,    # —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –ê–ì –≤ –ø—Ä–µ–¥—ã–¥—É—â—É—é –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å (1/0)
    "X3": 2.64,     # –î–ê–î >100 –≤ I —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ (1/0)
    "X4": 4.22,     # –î–ê–î >100 –≤–æ II —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ (1/0)
    "X5": -57.11,   # —ç–∫—Å–ø—Ä–µ—Å—Å–∏—è miR-181a (—á–∏—Å–ª–æ)
    "X6": 117.62,   # —ç–∫—Å–ø—Ä–µ—Å—Å–∏—è miR-221 (—á–∏—Å–ª–æ)
}
INTERCEPT = -3.96

def compute_D(x1, x2, x3, x4, x5, x6):
    """Compute linear score D."""
    return (
        COEFFS["X1"] * x1
        + COEFFS["X2"] * x2
        + COEFFS["X3"] * x3
        + COEFFS["X4"] * x4
        + COEFFS["X5"] * x5
        + COEFFS["X6"] * x6
        + INTERCEPT
    )

def risk_label(D):
    return "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫" if D > 0 else "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"

def contribution_table(x1, x2, x3, x4, x5, x6):
    vals = {"X1": x1, "X2": x2, "X3": x3, "X4": x4, "X5": x5, "X6": x6}
    rows = []
    for k, v in vals.items():
        rows.append(
            {
                "–ü—Ä–∏–∑–Ω–∞–∫": k,
                "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": COEFFS[k],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": v,
                "–í–∫–ª–∞–¥": COEFFS[k] * v,
            }
        )
    df = pd.DataFrame(rows)
    df.loc[len(df)] = ["–°–º–µ—â–µ–Ω–∏–µ (intercept)", "", "", INTERCEPT]
    df["–í–∫–ª–∞–¥ (–Ω–∞–∫–æ–ø.)"] = df["–í–∫–ª–∞–¥"].cumsum()
    return df

def standardize_boolean_col(s):
    """Convert a series with values like 1/0/True/False/–¥–∞/–Ω–µ—Ç/yes/no to 1/0."""
    mapping = {
        "–¥–∞": 1, "–¥a": 1, "yes": 1, "y": 1, "true": 1, "–∏—Å—Ç–∏–Ω–∞": 1,
        "–Ω–µ—Ç": 0, "no": 0, "n": 0, "false": 0, "–ª–æ–∂—å": 0
    }
    def convert(v):
        if pd.isna(v):
            return np.nan
        if isinstance(v, (int, float)) and v in (0, 1):
            return int(v)
        if isinstance(v, bool):
            return int(v)
        s = str(v).strip().lower()
        return mapping.get(s, np.nan)
    return s.apply(convert)

def prepare_batch_df(df):
    """
    Accepts either columns named X1..X6 or the verbose Russian names below.
    Returns a clean DataFrame with X1..X6 as numeric (1/0 for booleans).
    """
    # Try to map Russian column names if present:
    rename_map = {
        "–≥–∏–ø–æ–¥–∏–Ω–∞–º–∏—è": "X1",
        "—Ö1": "X1",
        "—Ö2": "X2",
        "—Ö3": "X3",
        "—Ö4": "X4",
        "—Ö5": "X5",
        "—Ö6": "X6",
        "—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –∞–≥ –≤ –ø—Ä–µ–¥—ã–¥—É—â—É—é –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å": "X2",
        "–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –∞–¥ >100 –º–º —Ä—Ç. —Å—Ç. –≤ i —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ": "X3",
        "–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –∞–¥ >100 –º–º —Ä—Ç. —Å—Ç. –≤–æ ii —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ": "X4",
        "—É—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø—Ä–µ—Å—Å–∏–∏ –º–∏–∫—Ä–æ—Ä–Ω–∫ 181–∞": "X5",
        "—É—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø—Ä–µ—Å—Å–∏–∏ –º–∏–∫—Ä–æ—Ä–Ω–∫ 221": "X6",
        "miR181a": "X5",
        "miR-181a": "X5",
        "miR221": "X6",
        "miR-221": "X6",
    }
    # Normalize column names (strip and lower) for mapping
    lower_cols = {c: c for c in df.columns}
    df2 = df.copy()
    for c in df.columns:
        cl = c.strip().lower()
        if cl in rename_map:
            df2.rename(columns={c: rename_map[cl]}, inplace=True)

    # If still not present, leave as is (maybe user already named X1..X6)
    missing = [c for c in ["X1", "X2", "X3", "X4", "X5", "X6"] if c not in df2.columns]
    if missing:
        raise ValueError(
            f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing}. –û–∂–∏–¥–∞—é—Ç—Å—è X1..X6 –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è."
        )

    # Standardize boolean columns X1..X4
    for c in ["X1", "X2", "X3", "X4"]:
        df2[c] = standardize_boolean_col(df2[c])

    # Numeric for X5, X6
    for c in ["X5", "X6"]:
        df2[c] = pd.to_numeric(df2[c], errors="coerce")

    # Final check
    if df2[["X1", "X2", "X3", "X4", "X5", "X6"]].isna().any().any():
        raise ValueError("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∏/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ X1..X6 –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.")

    return df2[["X1", "X2", "X3", "X4", "X5", "X6"]]

# ----------------------- UI -----------------------

st.title("ü©∫ OMM SUPERIMPOSED PREECLAMPSIA PREDICT")
st.caption("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∏—Å–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–µ—ç–∫–ª–∞–º–ø—Å–∏–∏ —É –ø–∞—Ü–∏–µ–Ω—Ç–æ–∫ —Å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–π –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –≥–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏–µ–π.")
with st.expander("–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"):
    st.markdown(
        """
**–°–∫–æ—Ä–∏–Ω–≥–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞:**

\\[
D = 2{,}45\\cdot X_1 - 4{,}63\\cdot X_2 + 2{,}64\\cdot X_3 + 4{,}22\\cdot X_4 - 57{,}11\\cdot X_5 + 117{,}62\\cdot X_6 - 3{,}96.
\\]

- **X1** ‚Äî –≥–∏–ø–æ–¥–∏–Ω–∞–º–∏—è (–¥–∞/–Ω–µ—Ç ‚Üí 1/0)  
- **X2** ‚Äî —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –ê–ì –≤ –ø—Ä–µ–¥—ã–¥—É—â—É—é –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å (–¥–∞/–Ω–µ—Ç ‚Üí 1/0)  
- **X3** ‚Äî –î–ê–î > 100 –º–º —Ä—Ç. —Å—Ç. –≤ I —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ –¥–∞–Ω–Ω–æ–π –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ (–¥–∞/–Ω–µ—Ç ‚Üí 1/0)  
- **X4** ‚Äî –î–ê–î > 100 –º–º —Ä—Ç. —Å—Ç. –≤–æ II —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ –¥–∞–Ω–Ω–æ–π –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ (–¥–∞/–Ω–µ—Ç ‚Üí 1/0)  
- **X5** ‚Äî —É—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø—Ä–µ—Å—Å–∏–∏ –º–∏–∫—Ä–æ–†–ù–ö 181–∞ –≤ I —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ (—á–∏—Å–ª–æ)  
- **X6** ‚Äî —É—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø—Ä–µ—Å—Å–∏–∏ –º–∏–∫—Ä–æ–†–ù–ö 221 –≤ I —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ (—á–∏—Å–ª–æ)  

**–ü—Ä–∞–≤–∏–ª–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:**  
- –ï—Å–ª–∏ **D > 0** ‚Üí **–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫**  
- –ï—Å–ª–∏ **D ‚â§ 0** ‚Üí **–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫**  

> ‚ö†Ô∏è *–î–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ–ª—å–∫–æ –∫–∞–∫ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º.*
        """
    )

tab1, tab2 = st.tabs(["üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (1 –ø–∞—Ü–∏–µ–Ω—Ç–∫–∞)", "üìÑ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (CSV)"])

with tab1:
    st.subheader("–í–≤–æ–¥ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    c1, c2 = st.columns(2)
    with c1:
        X1 = 1 if st.checkbox("X1: –ì–∏–ø–æ–¥–∏–Ω–∞–º–∏—è (–¥–∞)", value=False) else 0
        X2 = 1 if st.checkbox("X2: –•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –ê–ì –≤ –ø—Ä–µ–¥—ã–¥—É—â—É—é –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å (–¥–∞)", value=False) else 0
        X3 = 1 if st.checkbox("X3: –î–ê–î >100 –º–º —Ä—Ç. —Å—Ç. –≤ I —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ (–¥–∞)", value=False) else 0
        X4 = 1 if st.checkbox("X4: –î–ê–î >100 –º–º —Ä—Ç. —Å—Ç. –≤–æ II —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ (–¥–∞)", value=False) else 0
    with c2:
        X5 = st.number_input(
            "X5: –£—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø—Ä–µ—Å—Å–∏–∏ miR-181a (I —Ç—Ä–∏–º–µ—Å—Ç—Ä)",
            min_value=0.0, step=0.0001, format="%.6f", value=0.0,
            help="–í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ; –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–º—É –ø—Ä–æ—Ç–æ–∫–æ–ª—É."
        )
        X6 = st.number_input(
            "X6: –£—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø—Ä–µ—Å—Å–∏–∏ miR-221 (I —Ç—Ä–∏–º–µ—Å—Ç—Ä)",
            min_value=0.0, step=0.0001, format="%.6f", value=0.0,
            help="–í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ; –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–º—É –ø—Ä–æ—Ç–æ–∫–æ–ª—É."
        )

    D = compute_D(X1, X2, X3, X4, X5, X6)
    lbl = risk_label(D)

    st.markdown("---")
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")
    if D > 0:
        st.error(f"**{lbl}**  \n–°—á—ë—Ç D = **{D:.3f}** (–ø–æ—Ä–æ–≥ 0)")
    else:
        st.success(f"**{lbl}**  \n–°—á—ë—Ç D = **{D:.3f}** (–ø–æ—Ä–æ–≥ 0)")

    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞"):
        dfc = contribution_table(X1, X2, X3, X4, X5, X6)
        st.dataframe(dfc, use_container_width=True)
