# app.py
import streamlit as st
import pandas as pd

st.set_page_config(page_title="OMM SUPERIMPOSED PREECLAMPSIA PREDICT",
                   page_icon="ü©∫", layout="centered")

COEFFS = {"X1": 2.45, "X2": -4.63, "X3": 2.64, "X4": 4.22, "X5": -57.11, "X6": 117.62}
INTERCEPT = -3.96

def compute_D(x1, x2, x3, x4, x5, x6):
    return (COEFFS["X1"]*x1 + COEFFS["X2"]*x2 + COEFFS["X3"]*x3 + COEFFS["X4"]*x4
            + COEFFS["X5"]*x5 + COEFFS["X6"]*x6 + INTERCEPT)

def risk_label(D):
    return "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫" if D > 0 else "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"

def parse_float(s: str):
    """Return float value from text (supports comma decimal), or None if blank/invalid."""
    s = (s or "").strip()
    if s == "":
        return None
    try:
        return float(s.replace(",", "."))  # allow comma decimal input
    except ValueError:
        return None

st.title("ü©∫ OMM SUPERIMPOSED PREE–öLAMPSIA PREDICT")
st.caption("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –ø—Ä–µ—ç–∫–ª–∞–º–ø—Å–∏–∏ —É –ø–∞—Ü–∏–µ–Ω—Ç–æ–∫ —Å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–π –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –≥–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏–µ–π.")

st.subheader("–í–≤–æ–¥ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
c1, c2 = st.columns(2)

with c1:
    X1 = 1 if st.checkbox("–ì–∏–ø–æ–¥–∏–Ω–∞–º–∏—è", value=False) else 0
    X2 = 1 if st.checkbox("–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –ê–ì –≤ –ø—Ä–µ–¥—ã–¥—É—â—É—é –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å", value=False) else 0
    X3 = 1 if st.checkbox("–î–ê–î >100 –º–º —Ä—Ç. —Å—Ç. –≤ I —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ", value=False) else 0
    X4 = 1 if st.checkbox("–î–ê–î >100 –º–º —Ä—Ç. —Å—Ç. –≤–æ II —Ç—Ä–∏–º–µ—Å—Ç—Ä–µ", value=False) else 0

with c2:
    X5_text = st.text_input("–£—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø—Ä–µ—Å—Å–∏–∏ miR-181a (I —Ç—Ä–∏–º–µ—Å—Ç—Ä)",
                            value="", placeholder="–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä., 0.0123)")
    X6_text = st.text_input("–£—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø—Ä–µ—Å—Å–∏–∏ miR-221 (I —Ç—Ä–∏–º–µ—Å—Ç—Ä)",
                            value="", placeholder="–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä., 0.0456)")

st.markdown("---")

if "last_result" not in st.session_state:
    st.session_state.last_result = None

if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    X5 = parse_float(X5_text)
    X6 = parse_float(X6_text)

    # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if X5 is None or X6 is None:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è X5 –∏ X6.")
    elif X5 < 0 or X6 < 0:
        st.warning("–ó–Ω–∞—á–µ–Ω–∏—è X5 –∏ X6 –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏.")
    else:
        D = compute_D(X1, X2, X3, X4, X5, X6)
        st.session_state.last_result = {"D": D, "label": risk_label(D)}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
res = st.session_state.last_result
if res is not None:
    if res["D"] > 0:
        st.error(f"**{res['label']}**  \n–°—á—ë—Ç D = **{res['D']:.3f}** (–ø–æ—Ä–æ–≥ 0)")
    else:
        st.success(f"**{res['label']}**  \n–°—á—ë—Ç D = **{res['D']:.3f}** (–ø–æ—Ä–æ–≥ 0)")
